library("Seurat")
library("ggplot2")
library("png")
library("stringr")
?writePNG
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
library("EBImage")
# data_location = "/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/brain1A_object.rds"
data_location = "/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/brain1D_object.rds"
brain <- readRDS(data_location)
# data_location = "/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/brain1A_object.rds"
data_location = "/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/brain1D_object.rds"
brain <- readRDS(data_location)
class(brain@images[[1]]@image)
resize(brain@images[[1]]@image, 6000)
img = brain@images[[1]]@image
img_resized = resize(img, dim(img)[1] * 10)
writePNG(img_resized, "/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/test_he2.png")
# data_location = "/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/brain1A_object.rds"
data_location = "/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/"
rds_files = list.files(data_location, pattern="*.rds", full.names=TRUE)
rds_files
rds_files = list.files(data_location, pattern="*.rds$", full.names=TRUE)
strsplit(filename, "/")
filename=rds_files[1]
strsplit(filename, "/")
tail(strsplit(filename, "/")[[1]],1)
str_split_fixed(tail(strsplit(filename, "/")[[1]],1), "_", 2)[,1]
output_dir="/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/
data_location = "/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/"
rds_files = list.files(data_location, pattern="*.rds$", full.names=TRUE)
for (filename in rds_files){
brain <- readRDS(filename)
sample_name = str_split_fixed(tail(strsplit(filename, "/")[[1]],1), "_", 2)[,1]
img = brain@images[[1]]@image
img_resized = resize(img, dim(img)[1] * 10)
writePNG(img_resized, )
}
# SpatialFeaturePlot(brain, features = "nCount_Spatial") + theme(legend.position = "right")
class(brain@images[[1]]@image)
# he <- readPNG(source = brain@images[[1]]@image, native=TRUE)
brain@assays$Spatial@counts
brain@assays$Spatial@data
coordinates = GetTissueCoordinates(brain)
# write.table(coordinates, "/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/test_coords.csv", quote=FALSE, sep=",")
count_data = t(as.matrix(brain@assays$Spatial@data))
# write.table(count_data, "/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/test_counts.csv", quote=FALSE, sep=",")
colnames(count_data)[grepl("\\.", colnames(count_data))]
colnames(count_data)[grepl("TBCE", colnames(count_data))]
#TODO figure out upsizing
orig_width = 590
new_width = 6000
scale_factor = new_width / orig_width
coordinates$scalerow = coordinates$imagerow * scale_factor
coordinates$scalecol = coordinates$imagecol * scale_factor
files = list.files("/Users/morganoneka/Box/My Stuff/KimiaNet/patches/", pattern="*.jpg")
file_counts = lapply(files, function(fname){
# get square info
coords = str_split_fixed(fname, "_", 3)
x_min = as.numeric(gsub("[^0-9]", "", str_split_fixed(coords[2], ",",2)[1]))
x_max = as.numeric(gsub("[^0-9]", "", str_split_fixed(coords[3], ",",2)[1]))
y_min = as.numeric(gsub("[^0-9]", "", str_split_fixed(coords[2], ",",2)[2]))
y_max = as.numeric(gsub("[^0-9]", "", str_split_fixed(coords[3], ",",2)[2]))
# subset square
location_subset = coordinates[which(coordinates$scalerow >= x_min & coordinates$scalerow  <= x_max &
coordinates$scalecol >= y_min & coordinates$scalecol <= y_max),]
# get count info
location_subset_counts = subset(count_data, rownames(count_data) %in% rownames(location_subset))
# sum count info
location_subset_totals = colSums(location_subset_counts)
return(location_subset_totals)
})
file_counts_combo = do.call(rbind, file_counts)
coords_from_file_names = lapply(files, function(fname){
coords = str_split_fixed(fname, "_", 3)
return(paste(coords[2], str_split_fixed(coords[3], "\\.", 2)[1], sep="_"))
})
row.names(file_counts_combo) = unlist(coords_from_file_names)
write.table(file_counts_combo, "/Users/morganoneka/Box/My Stuff/KimiaNet/CountsForSquares.txt", sep="\t", quote=FALSE)
paste(output_dir, "pngs/", sample_name, ".png", sep="")
output_dir="/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/"
paste(output_dir, "pngs/", sample_name, ".png", sep="")
for (filename in rds_files){
# read in file
brain <- readRDS(filename)
sample_name = str_split_fixed(tail(strsplit(filename, "/")[[1]],1), "_", 2)[,1]
# resize image
img = brain@images[[1]]@image
img_resized = resize(img, dim(img)[1] * 10)
# save resized image to png folder
writePNG(img_resized, paste(output_dir, "pngs/", sample_name, ".png", sep=""))
}
rds_files
sample_name
files = list.files(paste("/Users/morganoneka/Box/My Stuff/KimiaNet/patches/" , sample_name), pattern="*.jpg")
files = list.files(paste("/Users/morganoneka/Box/My Stuff/KimiaNet/patches/" , sample_name, sep=""), pattern="*.jpg")
files = list.files(paste("/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/patches/" , sample_name, sep=""), pattern="*.jpg")
# now we get the counts for each patch
for (filename in rds_files){
# read in file
brain <- readRDS(filename)
sample_name = str_split_fixed(tail(strsplit(filename, "/")[[1]],1), "_", 2)[,1]
# get coordinates from rds file
coordinates = GetTissueCoordinates(brain)
count_data = t(as.matrix(brain@assays$Spatial@data))
# scale coordinates
scale_factor = 10
coordinates$scalerow = coordinates$imagerow * scale_factor
coordinates$scalecol = coordinates$imagecol * scale_factor
# subset counts based on square location
files = list.files(paste("/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/patches/" , sample_name, sep=""), pattern="*.jpg")
file_counts = lapply(files, function(fname){
# get square info
coords = str_split_fixed(fname, "_", 3)
x_min = as.numeric(gsub("[^0-9]", "", str_split_fixed(coords[2], ",",2)[1]))
x_max = as.numeric(gsub("[^0-9]", "", str_split_fixed(coords[3], ",",2)[1]))
y_min = as.numeric(gsub("[^0-9]", "", str_split_fixed(coords[2], ",",2)[2]))
y_max = as.numeric(gsub("[^0-9]", "", str_split_fixed(coords[3], ",",2)[2]))
# subset square
location_subset = coordinates[which(coordinates$scalerow >= x_min & coordinates$scalerow  <= x_max &
coordinates$scalecol >= y_min & coordinates$scalecol <= y_max),]
# get count info
location_subset_counts = subset(count_data, rownames(count_data) %in% rownames(location_subset))
# sum count info
location_subset_totals = colSums(location_subset_counts)
return(location_subset_totals)
})
# combine all count info
file_counts_combo = do.call(rbind, file_counts)
# get coordinates and set as row names
coords_from_file_names = lapply(files, function(fname){
coords = str_split_fixed(fname, "_", 3)
return(paste(coords[2], str_split_fixed(coords[3], "\\.", 2)[1], sep="_"))
})
row.names(file_counts_combo) = unlist(coords_from_file_names)
# save
write.table(file_counts_combo, paste("/Users/morganoneka/Box/My Stuff/KimiaNet/CountsForSquares_", sample_name,".txt", sep=""), sep="\t", quote=FALSE)
}
# now we get the counts for each patch
for (filename in rds_files){
# read in file
brain <- readRDS(filename)
sample_name = str_split_fixed(tail(strsplit(filename, "/")[[1]],1), "_", 2)[,1]
# get coordinates from rds file
coordinates = GetTissueCoordinates(brain)
count_data = t(as.matrix(brain@assays$Spatial@data))
# scale coordinates
scale_factor = 10
coordinates$scalerow = coordinates$imagerow * scale_factor
coordinates$scalecol = coordinates$imagecol * scale_factor
# subset counts based on square location
files = list.files(paste("/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/patches/" , sample_name, sep=""), pattern="*.jpg")
file_counts = lapply(files, function(fname){
# get square info
coords = str_split_fixed(fname, "_", 3)
x_min = as.numeric(gsub("[^0-9]", "", str_split_fixed(coords[2], ",",2)[1]))
x_max = as.numeric(gsub("[^0-9]", "", str_split_fixed(coords[3], ",",2)[1]))
y_min = as.numeric(gsub("[^0-9]", "", str_split_fixed(coords[2], ",",2)[2]))
y_max = as.numeric(gsub("[^0-9]", "", str_split_fixed(coords[3], ",",2)[2]))
# subset square
location_subset = coordinates[which(coordinates$scalerow >= x_min & coordinates$scalerow  <= x_max &
coordinates$scalecol >= y_min & coordinates$scalecol <= y_max),]
# get count info
location_subset_counts = subset(count_data, rownames(count_data) %in% rownames(location_subset))
# sum count info
location_subset_totals = colSums(location_subset_counts)
return(location_subset_totals)
})
# combine all count info
file_counts_combo = do.call(rbind, file_counts)
# get coordinates and set as row names
coords_from_file_names = lapply(files, function(fname){
coords = str_split_fixed(fname, "_", 3)
return(paste(coords[2], str_split_fixed(coords[3], "\\.", 2)[1], sep="_"))
})
row.names(file_counts_combo) = unlist(coords_from_file_names)
# save
write.table(file_counts_combo, paste("/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/CountsForSquares_", sample_name,".txt", sep=""), sep="\t", quote=FALSE)
}
install.packages(c("kableExtra", "randomForest", "randomForestExplainer", "spatialRF"))
library(spatialRF)
library(stringr)
library(Rcpp)
library(viridis)
library(ggplot2)
library(kableExtra)
library(randomForestExplainer)
library(tidyverse)
library(randomForest)
# load from RData so you don't have to re-run every time
load("/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/RunSpatialRF.RData")
# read in locations with gene expression info
count_input = read.table("/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/CountsForSquares_brain1A.txt", sep="\t", header=TRUE, fill=TRUE, stringsAsFactors=FALSE)
# read in text file with features
feature_input = read.table("/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/extracted_features_brain1A.csv", sep=",", header=TRUE, fill=TRUE, stringsAsFactors=FALSE )
count_positive = count_input[which(rowSums(count_input) > 0),]
comparable_patch_names = lapply(row.names(count_positive), function(x){
return(paste("patch_", x, sep=""))
})
feature_positive = feature_input[which(feature_input$X %in% comparable_patch_names),]
feature_positive$X  == unlist(comparable_patch_names)
# decide on variables to use
tail(sort(colSums(count_input)), 20)
# dependent.variable.name <- "THY1"
dependent.variable.name <- "THY1"
# predictor.variable.names <- head(colnames(feature_positive[,2:ncol(feature_positive)])[which(colSums(feature_positive[,2:ncol(feature_positive)]) > 0)], 300)
# predictor.variable.names <- colnames(feature_positive[,2:ncol(feature_positive)])[which(colSums(feature_positive[,2:ncol(feature_positive)]) > 0)]
# predictor.variable.names <- head(colnames(feature_positive[,2:ncol(feature_positive)]), 500)
predictor.variable.names <- colnames(feature_positive[,2:ncol(feature_positive)])
# create data frame with dependent variable and some predictors
data = cbind(count_positive[,dependent.variable.name], feature_positive[,predictor.variable.names])
colnames(data) <- c(dependent.variable.name, predictor.variable.names)
# ggplot() + geom_tile(data = cbind(xy, data), aes(x=x, y=y, fill=THY1)) + coord_equal()
# ggplot() + geom_tile(data = cbind(xy, data), aes(x=x, y=y, fill=X82)) + coord_equal()
# NON SPATIAL RF
data_binarized = data
# data_binarized[which(data_binarized[,dependent.variable.name] <= median(data_binarized[,dependent.variable.name])), dependent.variable.name] = 0
data_binarized[which(data_binarized[,dependent.variable.name] <= mean(data_binarized[,dependent.variable.name])), dependent.variable.name] = 0
data_binarized[which(data_binarized[,dependent.variable.name] > 0), dependent.variable.name] = 1
data_binarized[,dependent.variable.name] = as.factor(data_binarized[,dependent.variable.name])
thy1.rf.binarized <- randomForest(THY1 ~ .,
data = data_binarized,
importance = TRUE)
print(thy1.rf.binarized)
plot(thy1.rf.binarized)
varImpPlot(thy1.rf.binarized)
library(spatialRF)
library(stringr)
library(Rcpp)
library(viridis)
library(ggplot2)
library(kableExtra)
library(randomForestExplainer)
library(tidyverse)
library(randomForest)
binarize_data <- function(molded_data, dependent.variable.name){
data_binarized = molded_data
data_binarized[which(data_binarized[,dependent.variable.name] <= mean(data_binarized[,dependent.variable.name])), dependent.variable.name] = 0
data_binarized[which(data_binarized[,dependent.variable.name] > 0), dependent.variable.name] = 1
data_binarized[,dependent.variable.name] = as.factor(data_binarized[,dependent.variable.name])
return(data_binarized)
}
B1_data <- get_data("/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/", "brain1A")
library(spatialRF)
library(stringr)
library(Rcpp)
library(viridis)
library(ggplot2)
library(kableExtra)
library(randomForestExplainer)
library(tidyverse)
library(randomForest)
load("/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/RunSpatialRF.RData")
get_data <- function(directory, prefix){
# read in locations with gene expression info
count_input = read.table(paste(directory, "CountsForSquares_", prefix, ".txt", sep=""), sep="\t", header=TRUE, fill=TRUE, stringsAsFactors=FALSE)
# read in text file with features
feature_input = read.table(paste(directory, "extracted_features_", prefix, ".csv", sep=""), sep=",", header=TRUE, fill=TRUE, stringsAsFactors=FALSE )
# remove squares that have zeroes for the whole row
count_positive = count_input[which(rowSums(count_input) > 0),]
comparable_patch_names = lapply(row.names(count_positive), function(x){
return(paste("patch_", x, sep=""))
})
feature_positive = feature_input[which(feature_input$X %in% comparable_patch_names),]
feature_positive$X  == unlist(comparable_patch_names)
# return combined dataframe PLUS differentiation btw gene and feature columns
return(list(
all_data = cbind(count_positive, feature_positive),
gene_names = colnames(count_positive),
feature_names = colnames(feature_positive))
)
}
mold_data_for_model <- function(raw_data, dependent, num_features=NULL){
# subset features if necessary
features_to_use = raw_data[["feature_names"]]
if (!is.null(num_features)){
features_to_use = head(features_to_use, num_features)
}
return(cbind(raw_data[["all_data"]][, dependent], raw_data[["all_data"]][, features_to_use]))
}
B1_data <- get_data("/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/", "brain1A")
B1_for_rf <- binarize_data(mold_data_for_model(B1_data, "THY1"), "THY1")
B1_data <- get_data("/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/", "brain1A")
head(B1_data)
head(mold_data_for_model(B1_data))
head(mold_data_for_model(B1_data, dependent="THY1"))
mold_data_for_model <- function(raw_data, dependent, num_features=NULL){
# subset features if necessary
features_to_use = raw_data[["feature_names"]]
if (!is.null(num_features)){
features_to_use = head(features_to_use, num_features)
}
# molded_data = cbind(, raw_data[["all_data"]][, features_to_use])
return(raw_data[["all_data"]][, c(dependent, features_to_use)])
}
head(mold_data_for_model(B1_data, dependent="THY1"))
head(binarize_data(mold_data_for_model(B1_data, dependent="THY1")))
B1_molded <- mold_data_for_model(B1_data, dependent="THY1")
head(binarize_data(B1_molded, "THY1"))
B1_molded <- mold_data_for_model(B1_data, dependent="THY1")
B1_binarized <- binarize_data(B1_molded, "THY1")
thy1.rf.binarized <- randomForest(THY1 ~ .,
data = B1_binarized,
importance = TRUE)
print(thy1.rf.binarized)
plot(thy1.rf.binarized)
thy1.rf.binarized <- randomForest(THY1 ~ .,
data = B1_binarized,
importance = TRUE)
print(thy1.rf.binarized)
plot(thy1.rf.binarized)
B2_data <- get_data("/Users/morganoneka/Dropbox (University of Michigan)/from_box/My Stuff/KimiaNet/", "brain1D")
B2_molded <- mold_data_for_model(B2_data, dependent="THY1")
B2_binarized <- binarize_data(B2_molded, "THY1")
head(B2_binarized)
predict(thy1.rf.binarized, newdata=B2_binarized)
thy1.rf.binarized.preiction <- predict(thy1.rf.binarized, newdata=B2_binarized)
thy1.rf.binarized.prediction <- predict(thy1.rf.binarized, newdata=B2_binarized)
accuracy <- cbind(B2_binarized[,"THY1"], thy1.rf.binarized.prediction)
table(accuracy)
accuracy <- cbind(B2_binarized[,"THY1"], thy1.rf.binarized.prediction)
head(accuracy)
accuracy <- as.data.frame(cbind(B2_binarized[,"THY1"], thy1.rf.binarized.prediction))
colnames(accuracy) <- c("Actual", "Predicted")
table(accuracy)
B2_thy1 <- randomForest(THY1 ~ .,
data = B2_binarized,
importance = TRUE)
print(B2_thy1)
plot(B2_thy1)
B1_thy1 <- randomForest(THY1 ~ .,
data = B1_binarized,
importance = TRUE)
print(B1_thy1)
plot(B1_thy1)
B1_thy1_prediction <- predict(B1_thy1, newdata=B2_binarized)
B1_thy1_accuracy <- as.data.frame(cbind(B2_binarized[,"THY1"], B1_thy1_prediction))
colnames(B1_thy1_accuracy) <- c("Actual", "Predicted")
table(B1_thy1_accuracy)
B2_thy1_prediction <- predict(B2_thy1, newdata=B1_binarized)
B2_thy1_accuracy <- as.data.frame(cbind(B1_binarized[,"THY1"], B2_thy1_prediction))
colnames(B2_thy1_accuracy) <- c("Actual", "Predicted")
table(B2_thy1_accuracy)
